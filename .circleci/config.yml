version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if ! $(command -v python >/dev/null)
            then
              sudo apt update
              sudo apt install python
            fi
            if ! $(command -v pip >/dev/null)
            then
              sudo apt update
              sudo apt install python-pip
            fi
            if ! $(command -v aws >/dev/null)
            then
              pip install awscli
            fi
            aws cloudformation delete-stack --stack-name udapeople-backend-$CIRCLE_WORKFLOW_ID
            aws cloudformation delete-stack --stack-name udapeople-frontend-$CIRCLE_WORKFLOW_ID

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl -H "token: b1cbdda4-c2dd-46e4-ae4e-91babf05fb00" \
              --request GET \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})

            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            echo "$CIRCLE_WORKFLOW_ID"
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags "project=udapeople" "stack-name=udapeople-backend-$CIRCLE_WORKFLOW_ID" \
              --stack-name "udapeople-backend-$CIRCLE_WORKFLOW_ID" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"
            aws cloudformation wait stack-create-complete --stack-name "udapeople-backend-$CIRCLE_WORKFLOW_ID"
            export BACKEND_URL=$(aws ec2 describe-instances \
              --filters "Name=tag:stack-name,Values=udapeople-backend-$CIRCLE_WORKFLOW_ID" \
              --query "Reservations[0].Instances[0].PublicDnsName" \
              --output text)
            curl -H "Content-Type: text/plain" \
              -H "token: b1cbdda4-c2dd-46e4-ae4e-91babf05fb00" \
              --request PUT \
              --data "$BACKEND_URL" \
              https://api.memstash.io/values/backend-url
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags "project=udapeople" "stack-name=udapeople-frontend-$CIRCLE_WORKFLOW_ID" \
              --stack-name "udapeople-frontend-$CIRCLE_WORKFLOW_ID" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[all]" > .circleci/ansible/inventory.txt
            export BACKEND_URL=$(curl -H "token: b1cbdda4-c2dd-46e4-ae4e-91babf05fb00" \
              --request GET \
              https://api.memstash.io/values/backend-url)
            echo $BACKEND_URL >> .circleci/ansible/inventory.txt
            pwd
            cat .circleci/ansible/inventory.txt
      - run:
          name: Install tar and gzip
          command: yum install -y tar && yum install -y gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "a9:34:93:69:43:66:13:1a:b1:ea:82:9d:92:37:58:bf"
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: apk add ansible && ansible-galaxy collection install community.general
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt \
              ~/project/.circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > ~/project/.circleci/migrations_output.txt
            echo $TYPEORM_HOST
            cat ~/project/.circleci/migrations_output.txt
      - run:
          name: Send migration results to memstash
          command: |
            if (grep "has been executed successfully" ~/project/.circleci/migrations_output.txt)
            then
              export MIGRATION_RESULT="1"
            else
              export MIGRATION_RESULT="0"
            fi
            curl -H "Content-Type: text/plain" \
              -H "token: b1cbdda4-c2dd-46e4-ae4e-91babf05fb00" \
              --request PUT \
              --data "$MIGRATION_RESULT" \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
      - revert-migrations
      - destroy-environment

#  deploy-frontend:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#            export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
#      - run:
#          name: Deploy frontend objects
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  deploy-backend:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Deploy backend
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  smoke-test:
#    docker:
#      # Lightweight Docker image
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
#            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]